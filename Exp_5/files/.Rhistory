install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5 + 7
x
< -< x - 3
<- x - 3
y <- x - 3
y
c(1.1., 9, 3.14)
z <- c(1.1., 9, 3.14)
z <- c(1.1, 9, 3.14)
?c()
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files
)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
ls()
list.files()
file.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", "folder1", "folder2")
file.path("folder1", "folder2", "mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2", file.path("testdir2", "testdir3"), recursive = T)
dir.create(file.path("testdir2", "testdir3"), recursive = T)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?:
?':'
sqe(1, 20)
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Philipp")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = "")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vet[c("foo", "bar")]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dom(my_vector)
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2(1:20, nrow=4, ncol=5)
my_matrix2<- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
bye()
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x){
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
require(tidyverse)
require(ggplot2)
require(jtools)
require(psych)
require(jtools)
require("Hmisc")
install.packages(c("tidyverse", "dplyr", "ggplot2", "jtools", "psych", "jtools", "Hmisc"))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(jtools)
library(psych)
library(jtools)
library(Hmisc)
read_in_data <- function(files=list.files("DATA")){
all_df <- data.frame()
for (file in files) {
file_df <- read.csv(paste("DATA/", file, sep = ""), sep=";", header = T, encoding="UTF-8")
if (dim(all_df)[1] == 0){
if (!("mouse_difficulties" %in% colnames(file_df))){
#print(colnames(file_df))
#print("col not present")
#print(add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz"))
file_df <- add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz")
}
all_df <- file_df
} else {
if (!("mouse_difficulties" %in% colnames(file_df))){
#print(colnames(file_df))
#print("col not present")
#print(add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz"))
file_df <- add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz")
}
all_df <- rbind(all_df, file_df)
}
}
return(all_df)
}
mltt_df <- read_in_data()
mltt_df <- mltt_df[, c(-1)] # delete first column as it is redundant
mltt_df$dependence <- as.factor(mltt_df$dependence)
mltt_df$reward_upper <- as.factor(mltt_df$reward_upper)
mltt_df$reward_lower <- as.factor(mltt_df$reward_lower)
mltt_df$pert_direct <- ifelse(mltt_df$pert_direct == 0, "up", "down")
mltt_df$pert_direct <- as.factor(mltt_df$pert_direct)
mltt_df$gate_passed <- as.numeric(mltt_df$gate_passed)
str(mltt_df)
mltt_df_raw <- mltt_df
install.packages(c("tidyverse", "dplyr", "ggplot2", "jtools", "psych", "jtools", "Hmisc"))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(jtools)
library(psych)
library(jtools)
library(Hmisc)
read_in_data <- function(files=list.files("DATA")){
all_df <- data.frame()
for (file in files) {
file_df <- read.csv(paste("DATA/", file, sep = ""), sep=";", header = T, encoding="UTF-8")
if (dim(all_df)[1] == 0){
if (!("mouse_difficulties" %in% colnames(file_df))){
#print(colnames(file_df))
#print("col not present")
#print(add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz"))
file_df <- add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz")
}
all_df <- file_df
} else {
if (!("mouse_difficulties" %in% colnames(file_df))){
#print(colnames(file_df))
#print("col not present")
#print(add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz"))
file_df <- add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz")
}
all_df <- rbind(all_df, file_df)
}
}
return(all_df)
}
mltt_df <- read_in_data()
mltt_df <- mltt_df[, c(-1)] # delete first column as it is redundant
mltt_df$dependence <- as.factor(mltt_df$dependence)
mltt_df$reward_upper <- as.factor(mltt_df$reward_upper)
mltt_df$reward_lower <- as.factor(mltt_df$reward_lower)
mltt_df$pert_direct <- ifelse(mltt_df$pert_direct == 0, "up", "down")
mltt_df$pert_direct <- as.factor(mltt_df$pert_direct)
mltt_df$gate_passed <- as.numeric(mltt_df$gate_passed)
str(mltt_df)
mltt_df_raw <- mltt_df
require(tidyverse)
require(ggplot2)
require(jtools)
require(psych)
require(jtools)
require("Hmisc")
# install.packages(c("tidyverse", "dplyr", "ggplot2", "jtools", "psych", "jtools", "Hmisc"))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(jtools)
library(psych)
library(jtools)
library(Hmisc)
read_in_data <- function(files=list.files("DATA")){
all_df <- data.frame()
for (file in files) {
file_df <- read.csv(paste("DATA/", file, sep = ""), sep=";", header = T, encoding="UTF-8")
if (dim(all_df)[1] == 0){
if (!("mouse_difficulties" %in% colnames(file_df))){
#print(colnames(file_df))
#print("col not present")
#print(add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz"))
file_df <- add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz")
}
all_df <- file_df
} else {
if (!("mouse_difficulties" %in% colnames(file_df))){
#print(colnames(file_df))
#print("col not present")
#print(add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz"))
file_df <- add_column(file_df, mouse_difficulties = rep("Question not presented", times=dim(file_df)[1]), .after="mouse_hz")
}
all_df <- rbind(all_df, file_df)
}
}
return(all_df)
}
mltt_df <- read_in_data()
mltt_df <- mltt_df[, c(-1)] # delete first column as it is redundant
mltt_df$dependence <- as.factor(mltt_df$dependence)
mltt_df$reward_upper <- as.factor(mltt_df$reward_upper)
mltt_df$reward_lower <- as.factor(mltt_df$reward_lower)
mltt_df$pert_direct <- ifelse(mltt_df$pert_direct == 0, "up", "down")
mltt_df$pert_direct <- as.factor(mltt_df$pert_direct)
mltt_df$gate_passed <- as.numeric(mltt_df$gate_passed)
str(mltt_df)
mltt_df_raw <- mltt_df
print(dim(mltt_df))
mltt_df <- mltt_df_raw %>%
filter(training == 0) %>%
group_by(id, trial_num, subblock, block) %>%
mutate(update_ms = (time_stamp-lag(time_stamp))*1000) %>%
ungroup() %>%
group_by(id, block, subblock) %>%
mutate(rank = dense_rank(trial_num)) %>%
ungroup() %>%
group_by(id, block, subblock) %>%
mutate(warm_up = ifelse(rank != 1 & rank !=2,
0, 1)) %>%
filter(warm_up == 0) %>%
ungroup() %>%
group_by(id, block, subblock) %>%
mutate(clean_rank = dense_rank(rank)) %>%
ungroup()
print(dim(mltt_df))
624/13
624/2
312/13
312/26
432*2
432*2+120
984*5.5
984*5.5/60
984*6.5/60
5*3*2*2*14
5*3*2*2*12
5*3*2*2*12*6.5/60
5*3*2*2*14*6.5/60
(120+5*3*2*2*14*6.5)/60
(120+5*3*2*2*14*6.5)/60
(864+120)*6.5/60
(840+120)*6.5/60
840/6
840/2
420/6
(720+120)*6.5/60
720/2
720/2/6
(720+240)*6.5/60
# practice
trial <- c(1:10, 1:10, 1:10,
1:10, 1:10, 1:10)
block <- c(rep(0, times = 10), rep(0, times = 10), rep(0, times = 10),
rep(0, times = 10), rep(0, times = 10), rep(0, times = 10))
subblock <- c(c(rep(1, times = 10), rep(2, times = 10), rep(3, times = 10),
rep(4, times = 10), rep(5, times = 10), rep(6, times = 10)))
dependence <- c(rep(1, times = 10),  rep(-1, times = 10),
rep(1, times = 10),  rep(-1, times = 10),
rep(1, times = 10),  rep(-1, times = 10))
pertur_strength <- rep(1.325, times = 60)
reward_upper <- rep(0, times = 60)
reward_upper <- reward_upper + c(70, 60, 50, 40, 30)
reward_lower <- rep(0, times = 60)
reward_lower <- reward_lower + c(30, 40, 50, 60, 70)
pert_direct <- c(rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5),
rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5),
rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5))
training <- rep(1, times = 60)
preview <- c(rep("long-congruent", times = 20), rep("medium-incongruent", times = 20), rep("short-congruent", times = 20))
practice_conditions <- cbind(trial, block, subblock, dependence, pertur_strength, reward_upper,
reward_lower, pert_direct, training, preview)
# experimental
trial <- c(1:60, 1:60, 1:60, 1:60, 1:60, 1:60)
block <- c(rep(1, times = 60), rep(2, times = 60), rep(3, times = 60), rep(4, times = 60),
rep(5, times = 60), rep(6, times = 60))
subblock <- c(rep(1, times = 60), rep(1, times = 60), rep(1, times = 60), rep(1, times = 60),
rep(1, times = 60), rep(1, times = 60))
dependence <- c(rep(1, times = 60),  rep(-1, times = 60), rep(1, times = 60),  rep(-1, times = 60),
rep(1, times = 60),  rep(-1, times = 60))
pertur_strength <- rep(1.325, times = 360)
reward_upper <- rep(0, times = 360)
reward_upper <- reward_upper + seq(30, 70, 10)
reward_lower <- rep(0, times = 360)
reward_lower <- reward_lower + seq(70, 30, -10)
pert_direct <- c(rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30),
rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30),
rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30))
training <- rep(0, times = 360)
preview <- c(rep("long-congruent", times = 120), rep("medium-incongruent", times = 120), rep("short-congruent", times = 120))
experimental_conditions <- cbind(trial, block, subblock, dependence, pertur_strength, reward_upper,
reward_lower, pert_direct, training, preview)
total_conditions <- rbind(practice_conditions, experimental_conditions)
total_conditions <- as.data.frame(total_conditions)
write.table(total_conditions, file = "Exp_Conditions.csv", sep = ";", fileEncoding = "UTF-8", row.names = F)
setwd("C:\Users\phr20gg\Documents\GitHub\MLTT_pygame_new_v2\files\")
setwd("C:\\Users\\phr20gg\\Documents\\GitHub\\MLTT_pygame_new_v2\\files\\")
getwd()
trial <- c(1:10, 1:10, 1:10,
1:10, 1:10, 1:10)
block <- c(rep(0, times = 10), rep(0, times = 10), rep(0, times = 10),
rep(0, times = 10), rep(0, times = 10), rep(0, times = 10))
subblock <- c(c(rep(1, times = 10), rep(2, times = 10), rep(3, times = 10),
rep(4, times = 10), rep(5, times = 10), rep(6, times = 10)))
dependence <- c(rep(1, times = 10),  rep(-1, times = 10),
rep(1, times = 10),  rep(-1, times = 10),
rep(1, times = 10),  rep(-1, times = 10))
pertur_strength <- rep(1.325, times = 60)
reward_upper <- rep(0, times = 60)
reward_upper <- reward_upper + c(70, 60, 50, 40, 30)
reward_lower <- rep(0, times = 60)
reward_lower <- reward_lower + c(30, 40, 50, 60, 70)
pert_direct <- c(rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5),
rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5),
rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5))
training <- rep(1, times = 60)
preview <- c(rep("long-congruent", times = 20), rep("medium-incongruent", times = 20), rep("short-congruent", times = 20))
practice_conditions <- cbind(trial, block, subblock, dependence, pertur_strength, reward_upper,
reward_lower, pert_direct, training, preview)
# experimental
trial <- c(1:60, 1:60, 1:60, 1:60, 1:60, 1:60)
block <- c(rep(1, times = 60), rep(2, times = 60), rep(3, times = 60), rep(4, times = 60),
rep(5, times = 60), rep(6, times = 60))
subblock <- c(rep(1, times = 60), rep(1, times = 60), rep(1, times = 60), rep(1, times = 60),
rep(1, times = 60), rep(1, times = 60))
dependence <- c(rep(1, times = 60),  rep(-1, times = 60), rep(1, times = 60),  rep(-1, times = 60),
rep(1, times = 60),  rep(-1, times = 60))
pertur_strength <- rep(1.325, times = 360)
reward_upper <- rep(0, times = 360)
reward_upper <- reward_upper + seq(30, 70, 10)
reward_lower <- rep(0, times = 360)
reward_lower <- reward_lower + seq(70, 30, -10)
pert_direct <- c(rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30),
rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30),
rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30))
training <- rep(0, times = 360)
preview <- c(rep("long-congruent", times = 120), rep("medium-incongruent", times = 120), rep("short-congruent", times = 120))
experimental_conditions <- cbind(trial, block, subblock, dependence, pertur_strength, reward_upper,
reward_lower, pert_direct, training, preview)
total_conditions <- rbind(practice_conditions, experimental_conditions)
total_conditions <- as.data.frame(total_conditions)
write.table(total_conditions, file = "Exp_Conditions.csv", sep = ";", fileEncoding = "UTF-8", row.names = F)
# practice
trial <- c(1:10, 1:10, 1:10,
1:10, 1:10, 1:10)
block <- c(rep(0, times = 10), rep(0, times = 10), rep(0, times = 10),
rep(0, times = 10), rep(0, times = 10), rep(0, times = 10))
subblock <- c(c(rep(1, times = 10), rep(2, times = 10), rep(3, times = 10),
rep(4, times = 10), rep(5, times = 10), rep(6, times = 10)))
dependence <- c(rep(1, times = 10),  rep(-1, times = 10),
rep(1, times = 10),  rep(-1, times = 10),
rep(1, times = 10),  rep(-1, times = 10))
pertur_strength <- rep(1.325, times = 60)
reward_upper <- rep(0, times = 60)
reward_upper <- reward_upper + c(70, 60, 50, 40, 30)
reward_lower <- rep(0, times = 60)
reward_lower <- reward_lower + c(30, 40, 50, 60, 70)
pert_direct <- c(rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5),
rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5),
rep(0, times = 5), rep(1, times = 5), rep(0, times = 5), rep(1, times = 5))
training <- rep(1, times = 60)
preview <- c(rep("long-congruent", times = 20), rep("medium-incongruent", times = 20), rep("short-congruent", times = 20))
practice_conditions <- cbind(trial, block, subblock, dependence, pertur_strength, reward_upper,
reward_lower, pert_direct, training, preview)
# experimental
trial <- c(1:60, 1:60, 1:60, 1:60, 1:60, 1:60)
block <- c(rep(1, times = 60), rep(2, times = 60), rep(3, times = 60), rep(4, times = 60),
rep(5, times = 60), rep(6, times = 60))
subblock <- c(rep(1, times = 60), rep(1, times = 60), rep(1, times = 60), rep(1, times = 60),
rep(1, times = 60), rep(1, times = 60))
dependence <- c(rep(1, times = 60),  rep(-1, times = 60), rep(1, times = 60),  rep(-1, times = 60),
rep(1, times = 60),  rep(-1, times = 60))
pertur_strength <- rep(1.325, times = 360)
reward_upper <- rep(0, times = 360)
reward_upper <- reward_upper + seq(30, 70, 10)
reward_lower <- rep(0, times = 360)
reward_lower <- reward_lower + seq(70, 30, -10)
pert_direct <- c(rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30),
rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30),
rep(0, times = 30), rep(1, times = 30), rep(0, times = 30), rep(1, times = 30))
training <- rep(0, times = 360)
preview <- c(rep("long-congruent", times = 120), rep("medium-incongruent", times = 120), rep("short-congruent", times = 120))
experimental_conditions <- cbind(trial, block, subblock, dependence, pertur_strength, reward_upper,
reward_lower, pert_direct, training, preview)
total_conditions <- rbind(practice_conditions, experimental_conditions)
total_conditions <- as.data.frame(total_conditions)
write.table(total_conditions, file = "Exp_Conditions.csv", sep = ";", fileEncoding = "UTF-8", row.names = F)
